(. type-level nats .)

(ind (S :: Ty -> Ty))
(ind (Z :: Ty))

(. list constrained by a length .)

(ind Vec
    (vempty :: Vec Z a)
    (vcons :: a -> (Vec n a) -> Vec (S n) a))

(. extract the components of a vector of length 3 .)

((extract3 :: (Vec (S (S (S Z))) a) -> {a a a})
    x
    match x
        (vcons a (vcons b (vcons c vempty)) -> {a b c}))

(ind Add)
(eqtn (Add (S a) b)
    S (Add a b))
(eqtn (Add Z b) b)

((vconcat :: (Vec a t) -> (Vec b t) -> Vec (Add a b) t) (x y)
    match x
        (vcons x xs -> vcons x (vconcat xs y))
        (vempty -> y))
(import-as List L)
(import-as IO IO)

(let (hello L.cons 'h' (L.cons 'e' (L.cons 'l' (L.cons 'l' (L.cons 'o' L.nil))))))
(let (world L.cons 'w' (L.cons 'o' (L.cons 'r' (L.cons 'l' (L.cons 'd' L.nil))))))

(unwords2 (x y) L.concat x (L.cons ' ' y))

(let
    (_ IO.putstr (unwords2 hello world))
    (_ IO.nl {}))

((swap :: {a b} -> {b a})
    x
    {(#1 x) (#0 x)})

((putcoord :: {Int Int} -> {})
    x
    let
        (_ putchr '{')
        (_ putint (#0 x))
        (_ putchr ',')
        (_ putint (#1 x))
        (_ putchr '}')
        {})

(let
    (_ putcoord (swap {4 5}))
    (_ IO.nl {}))

(ind Bool
    (true :: Bool)
    (false :: Bool))

(eq (x y) cmp x y true false false)

(fac x match (eq x 0)
    (true -> 1)
    (false -> * x (fac (- x 1))))

(let
    (_ putint (fac 6))
    (_ IO.nl {}))
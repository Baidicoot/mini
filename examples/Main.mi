(include List)
(import-as IO IO)

(let (hello cons 'h' (cons 'e' (cons 'l' (cons 'l' (cons 'o' nil))))))
(let (world cons 'w' (cons 'o' (cons 'r' (cons 'l' (cons 'd' nil))))))

(unwords2 (x y) concat x (cons ' ' y))

(let
    (_ IO.putstr (unwords2 hello world))
    (_ IO.nl {}))

((swap :: {a b} -> {b a})
    x
    {(#1 x) (#0 x)})

((putcoord :: {Int Int} -> {})
    x
    let
        (_ putchr '{')
        (_ putint (#0 x))
        (_ putchr ',')
        (_ putint (#1 x))
        (_ putchr '}')
        {})

(let
    (_ putcoord (swap {4 5}))
    (_ IO.nl {}))

(ind Bool
    (true :: Bool)
    (false :: Bool))

(fac x match x
    (0 -> 1)
    (_ -> * x (fac (- x 1))))

((fib :: Int -> Int) x
    match x
        (0 -> 1)
        (1 -> 1)
        (_ -> + (fib (- x 1)) (fib (- x 2))))

(let
    (_ putint (fac 30))
    (_ IO.nl {})
    (_ putint (fib 30))
    (_ IO.nl {}))
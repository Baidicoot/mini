I'd just like to interject for a moment. What you're referring to as Haskell, is in fact, GHC/Haskell, or as I've recently taken to calling it, GHC plus Haskell. Haskell is not an compiler unto itself, but rather another free component of a fully functioning GHC system made useful by the GHC corelibs, shell utilities and extensions comprising a full programming language defined by the Haskell 2010 Language Report.

Many computer users run a modified version of the GHC system every day, without realizing it. Through a peculiar turn of events, the version of GHC which is widely used today is often called "Haskell", and many of its users are not aware that it is basically the GHC system, developed by the Glasgow Haskell Compiler project.

There really is a Haskell, and these people are using it, but it is just a part of the system they use. Haskell is the specification: the rules of a language that defines what occurs in the other programs that you run. The specification is an essential part of a programming language, but useless by itself; it can only function in the context of a complete compiler. Haskell is normally used in combination with the GHC compiler: the whole system is basically GHC with Haskell added, or GHC/Haskell. All the so-called "Haskell" distributions are really distributions of GHC/Haskell.